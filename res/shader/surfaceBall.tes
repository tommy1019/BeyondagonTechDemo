#version 410

layout(quads) in;

in vec3 tcPosition[];
out vec3 tePosition;
out vec3 tePatchDistance;
out vec3 normal;

uniform mat4 projection;

#define ID gl_InvocationID

vec3 getPointOnCurve(vec3 a0, vec3 a1, vec3 a2, vec3 a3, float t)
{
    float b0 = (1 - t) * (1 - t) * (1 - t);
    float b1 = 3 * t * (1 - t) * (1 - t);
    float b2 = 3 * t * t * (1 - t);
    float b3 = t * t * t;

    return a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
}

void main()
{
    vec3 p0 = getPointOnCurve(tcPosition[0], tcPosition[1], tcPosition[2], tcPosition[3], gl_TessCoord.x);
    vec3 p1 = getPointOnCurve(tcPosition[4], tcPosition[5], tcPosition[6], tcPosition[7], gl_TessCoord.x);
    vec3 p2 = getPointOnCurve(tcPosition[8], tcPosition[9], tcPosition[10], tcPosition[11], gl_TessCoord.x);
    vec3 p3 = getPointOnCurve(tcPosition[12], tcPosition[13], tcPosition[14], tcPosition[15], gl_TessCoord.x);

    tePosition = vec3(getPointOnCurve(p0, p1, p2, p3, gl_TessCoord.y));
    gl_Position = vec4(tePosition, 1) * projection;
    normal = vec3(0, 0, 0);
}
